# -*- coding: utf-8 -*-
"""
Created on Mon Oct 15 12:04:29 2018

@author: Darin
"""

import numpy as np
# Creates a uniform mesh with a crack midway up the right edge of length = cr_sz

# Input
filename = 'Double_Cantilever_Pad_Long.inp'
dx = 0.001
dy = 0.001
Lx = 0.20
Ly = 0.06
cr_sz = 0.01

# Calculations
Nx = int(Lx/dx)
Ny = int(Ly/dy)
Nc = int(cr_sz/dx)

x = np.linspace(0, Lx, Nx+1)
y = np.linspace(0, Ly, Ny+1)
Nodes = np.hstack([np.tile(x,(Ny+1,1)).reshape(-1,1), np.tile(y.reshape(-1,1),(1,Nx+1)).reshape(-1,1)])
midrow = (Ny+1)/2
cr_tp = (midrow+1)*(Nx+1)
Nodes = np.vstack([Nodes[:cr_tp,:], Nodes[cr_tp-Nc:cr_tp,:], Nodes[cr_tp:,:]])
relative = np.array([1, 2, Nx+3, Nx+2]) # + an extra 1 for 1-based numbering
row_base = np.arange(Nx)
base = np.tile(np.arange(Nx),Ny) + (Nx+1)*np.tile(np.arange(Ny).reshape(-1,1),(1,Nx)).reshape(-1)
Elements = base.reshape(-1,1) + relative.reshape(1,-1)
Elements[(midrow*Nx):,:] += Nc * (Elements[(midrow*Nx):,:] > cr_tp-Nc)

with open(filename, 'w') as fh:
    # Header information
    fh.write('*Heading\n')
    fh.write('** Job name: Double_Crack Model name: Double_Crack\n')
    fh.write('** Generated by: Abaqus/CAE 6.14-2\n')
    fh.write('*Preprint, echo=NO, model=NO, history=NO, contact=NO\n')
    
    # Nodes
    fh.write('*Node\n')
    for nd in range(Nodes.shape[0]):
        fh.write('%6i,%6.6g,%6.6g\n'%(nd+1, Nodes[nd,0], Nodes[nd,1]))
    
    # Elements
    fh.write('*Element, type=CPS4R\n')
    for el in range(Elements.shape[0]):
        fh.write('%6i,%6i,%6i,%6i,%6i\n'%(el+1, Elements[el,0],Elements[el,1],Elements[el,2],Elements[el,3]))
        
    # Properties
    fh.write('***************************************************************\n')
    fh.write('*Uel property, elset=Coupled\n')
    fh.write('0.0075, 0.0027, 210.0, 0.3, 1.e-7, 1.0, 0, 1e-1\n')
    fh.write('**lc, gc, E, nu, k, thick, swt, eta\n')
    fh.write('***************************************************************\n')
    
    # Node sets
    offset = (Nx+1)*10
    fh.write('*Nset, nset=BOT\n%3i'%(1+offset))
    for num, i in enumerate(range(1,Nx+1)):
        if (num+1) % 16 == 0:
            fh.write('\n%3i'%(i+1+offset))
        else:
            fh.write(', %3i'%(i+1+offset))
    fh.write('\n')
    
    fh.write('*Nset, nset=BOT_M\n%3i\n'%((Nx+1)/2))
    
#    # Right edge above notch
#    fh.write('*Nset, nset=TOP\n%6i'%(Nodes.shape[0]-(Ny-midrow)*(Nx+1)))
#    for num, i in enumerate(range(Nodes.shape[0]-(Ny-1-midrow)*(Nx+1)-1, Nodes.shape[0]+1, Nx+1)):
#        if (num+1) % 16 == 0:
#            fh.write('\n%6i'%(i+1))
#        else:
#            fh.write(', %6i'%(i+1))
#    fh.write('\n')
    # Top edge for distance Ld
    Ld = Lx
    Nd = int(Ld/dx)
    Nodes = Nodes[:((Nx+1)*(Ny-9)),:]
    fh.write('*Nset, nset=TOP\n%6i'%(Nodes.shape[0]-Nd))
    for num, i in enumerate(range(Nodes.shape[0]-Nd, Nodes.shape[0])):
        if (num+1) % 16 == 0:
            fh.write('\n%6i'%(i+1))
        else:
            fh.write(', %6i'%(i+1))
    fh.write('\n')
    
    fh.write('*Nset, nset=ALL, generate\n')
    fh.write('1, %i, 1\n'%Nodes.shape[0])
    
    # Steps
    fh.write('** ----------------------------------------------------------------\n')
    fh.write('** \n')
    fh.write('** STEP: Load\n')
    fh.write('** \n')
    fh.write('*Step, name=Load, nlgeom=NO, inc=500\n')
    fh.write('*Static\n')
    fh.write('** \n')
    fh.write('** BOUNDARY CONDITIONS\n')
    fh.write('** \n')
    fh.write('** Name: BOT Type: Displacement/Rotation\n')
    fh.write('*Boundary\n')
    fh.write('BOT, 2, 2\n')
    fh.write('** Name: BOT_X Type: Displacement/Rotation\n')
    fh.write('*Boundary\n')
    fh.write('BOT_M, 1, 1\n')
    fh.write('** Name: Load Type: Displacement/Rotation\n')
    fh.write('*Boundary\n')
    fh.write('**, amplitude=Amp-1\n')
    fh.write('TOP, 2, 2, %1.4g\n'%(0.05*Ly))
    fh.write('** \n')
    fh.write('** OUTPUT REQUESTS\n')
    fh.write('** \n')
    fh.write('*Restart, write, frequency=0\n')
    fh.write('** \n')
    fh.write('** FIELD OUTPUT: F-Output-1\n')
    fh.write('** \n')
    fh.write('*Output, field\n')
    fh.write('*Node Output\n')
    fh.write('RF, U\n')
    fh.write('** \n')
    fh.write('** HISTORY OUTPUT: H-Output-1\n')
    fh.write('** \n')
    fh.write('*Output, history, variable=PRESELECT\n')
    fh.write('*End Step')