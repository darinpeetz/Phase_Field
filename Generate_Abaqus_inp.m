function [] = Generate_Abaqus_inp(Dimensions, Nelx, Nely, Nu0, E0, Gc, Lc, IC, filename)
% Creates a rectangular mesh for use with the modified version of PolyTop
%% Element and node counts
NElem = (Nelx)*Nely; NNode = (Nelx+1)*(Nely+1);
%% Node Definitions
dx = (Dimensions(2)-Dimensions(1))/Nelx;
dy = (Dimensions(4)-Dimensions(3))/Nely;
ynode = repmat(Dimensions(3):dy:Dimensions(4),Nelx+1,1);
xnode = repmat((Dimensions(1):dx:Dimensions(2))',Nely+1,1);
Node = [xnode ynode(:)];
Element = zeros(NElem,4);
%% Element Definitions
for ely = 1:Nely
    el = ((ely-1)*Nelx+1):ely*Nelx;
    Element(el,1) = ((ely-1)*(Nelx+1)+1):(ely*(Nelx+1)-1);
    Element(el,2) = ((ely-1)*(Nelx+1)+2):(ely*(Nelx+1));
    Element(el,3) = (ely*(Nelx+1)+2):((ely+1)*(Nelx+1));
    Element(el,4) = (ely*(Nelx+1)+1):((ely+1)*(Nelx+1)-1);
end

if strcmp(IC, 'crack')
  splitNodes = (Nelx+1)*round(Nely/2) + floor(0.9*Nelx):(Nelx+1)*(round(Nely/2)+1);
  Node = [Node(1:splitNodes(end),:); Node(splitNodes(1):splitNodes(end),:);
          Node(splitNodes(end)+1:end,:)];
  Element(Element(:,1) >= splitNodes(1), 1) = ...
      Element(Element(:,1) >= splitNodes(1), 1) + numel(splitNodes);
  Element(Element(:,2) >= splitNodes(1), 2) = ...
      Element(Element(:,2) >= splitNodes(1), 2) + numel(splitNodes);
  Element(Element(:,3) > splitNodes(end), 3) = ...
      Element(Element(:,3) > splitNodes(end), 3) + numel(splitNodes);
  Element(Element(:,4) > splitNodes(end), 4) = ...
      Element(Element(:,4) > splitNodes(end), 4) + numel(splitNodes);
end

%% Multigrid inerpolation operators
I = zeros(16*size(Element,1),1); J = I; K = I+1;
ind = 1:16;
for el = 1:size(Element,1)
  I(ind) = reshape(repmat(Element(el,:), 4, 1), [], 1);
  J(ind) = reshape(repmat(Element(el,:)', 1, 4), [], 1);
  ind = ind + 16;
end
K = sparse(I, J, K);

P = cell(1,1);
i = 1;
while numel(P) < 1 || size(P{end},1) > 80
  cind = 1;
  I = zeros(4*size(K,1),1); J = I;
  Iind = 1;
  for nd = 1:size(K,1)
    neighbors = find(K(nd,:));
    fine = any(ismember(neighbors, cNode));
    if ~fine
      I(Iind:Iind+numel(neighbors)-1) = cind;
      cind = cind+1;
      Iind = Iind + numel(neighbors);
    end
  end
  
  I = I(1:Iind-1); J = J(1:Ind-1); K = ones(numel(I));
  P{i} = sparse(I, J, K);
  P{i} = spdiags(1./sum(P{i},2),0,size(P{i},1),size(P{i},1))*P{i};
  i = i+1;
end
%% Plots
patch('Faces',Element,'Vertices',Node,'FaceColor','white','Edgecolor','k');
axis equal off

%% Write the input file
% filename = '4Lc.inp';
FileID = fopen(filename, 'wt');
fprintf(FileID,'*Heading\n');
fprintf(FileID,'** Job name: Scaling crack name: lc/2\n');
fprintf(FileID,'** Generated by: Matlab function GenerateAbaqus_inp.m\n');
fprintf(FileID,'*Preprint, echo=NO, model=NO, history=NO, contact=NO\n');
fprintf(FileID,'*Node\n');
fclose(FileID);

dlmwrite(filename,[1:size(Node,1); Node']','precision',12,'-append');

% Write user elements

FileID = fopen(filename, 'at');
fprintf(FileID,'**************************************\n');
fprintf(FileID,'*Element, type=CPS4, elset=phase\n');
fclose(FileID);
dlmwrite(filename,[1:size(Element,1); Element']', 'precision', 12, '-append');

% Material Properties
FileID = fopen(filename,'at');
fprintf(FileID,'**************************************\n');
fprintf(FileID,'*Uel property, elset=phase\n');
fprintf(FileID,'%1.6g, %1.6g, %1.6g, %1.6g, 1e-8, , 1\n', Lc, Gc, E0, Nu0);
fprintf(FileID,'**************************************\n');

% Nodes on bottom edge
fprintf(FileID,'**************************************\n');
fprintf(FileID,'*Nset, nset=bottom\n');
fclose(FileID);
nd_bot = find(Node(:,2)-min(Node(:,2))<1e-12);
list1 = nd_bot(1:16*floor(numel(nd_bot)/16));
dlmwrite(filename, reshape(list1,16,[])', 'precision', 12, '-append');
if mod(numel(nd_bot),16) ~= 0
  list2 = nd_bot(numel(list1)+1:end);
  dlmwrite(filename, reshape(list2,1,[]), 'precision', 12, '-append');
end

% Nodes on top edge
FileID = fopen(filename,'at');
fprintf(FileID,'*Nset, nset=top\n');
fclose(FileID);
nd_top = find(Node(:,2)-max(Node(:,2))>-1e-12);
list1 = nd_top(1:16*floor(numel(nd_top)/16));
dlmwrite(filename,reshape(list1,16,[])','precision',12,'-append');
if mod(numel(nd_top),16) ~= 0
  list2 = nd_top(numel(list1)+1:end);
  dlmwrite(filename,reshape(list2,1,[]),'precision',12,'-append');
end

% Loading
FileID = fopen(filename,'at');
fprintf(FileID,'** Section\n');
fprintf(FileID,'*Solid Section, elset=dummy, material=dummy\n');
fprintf(FileID,'1.0\n');
fprintf(FileID,'** \n');
fprintf(FileID,'** MATERIALS\n');
fprintf(FileID,'** \n');
fprintf(FileID,'*Material, name=dummy\n');
fprintf(FileID,'*Depvar\n');
fprintf(FileID,'16,\n');
fprintf(FileID,'*User Material, constants=2\n');
fprintf(FileID,'1.0e-11,0.3\n');
fprintf(FileID,'** \n');
fprintf(FileID,'** ----------------------------------------------------------------\n');
fprintf(FileID,'** \n');
fprintf(FileID,'** STEP: Loading\n');
fprintf(FileID,'** \n');
fprintf(FileID,'*Step, name=Loading, nlgeom=NO, inc=2000000\n');
fprintf(FileID,'*Static, direct\n');
fprintf(FileID,'0.0001, 1.,\n');
fprintf(FileID,'** \n');
fprintf(FileID,'** BOUNDARY CONDITIONS\n');
fprintf(FileID,'** \n');
fprintf(FileID,'** Name: Support Type: Displacement/Rotation\n');
fprintf(FileID,'*Boundary\n');
fprintf(FileID,'bottom, 1, 1\n');
fprintf(FileID,'bottom, 2, 2\n');
fprintf(FileID,'** \n');
fprintf(FileID,'** BOUNDARY CONDITIONS\n');
fprintf(FileID,'** \n');
fprintf(FileID,'** Name: Load Type: Displacement/Rotation\n');
fprintf(FileID,'*Boundary\n');
fprintf(FileID,'top, 2, 2, %1.4g\n',0.001*(Dimensions(4)-Dimensions(3)));
fprintf(FileID,'*End Step\n');
fclose(FileID);
end

